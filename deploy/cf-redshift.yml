---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template for creating a Redshift Cluster'
Parameters:
  KeyName:
    Description: The EC2 Key Pair for SSH access
    Type: 'AWS::EC2::KeyPair::KeyName'
  VPCId:
      Description: VpcId of existing Virtual Private Cloud (VPC)
      Type: AWS::EC2::VPC::Id
  SubnetID:
    Description: Subnet ID in your Virtual Private Cloud (VPC)
    Type: AWS::EC2::Subnet::Id
  DatabaseName:
    Description: The name of the first database to be created when the cluster is
      created
    Type: String
    Default: dev
    AllowedPattern: "([a-z]|[0-9])+"
  ClusterType:
    Description: The type of cluster
    Type: String
    Default: single-node
    AllowedValues:
      - single-node
      - multi-node
  NumberOfNodes:
    Description: The number of compute nodes in the cluster. For multi-node clusters,
      the NumberOfNodes parameter must be greater than 1
    Type: Number
    Default: '1'
  NodeType:
    Description: The type of node to be provisioned
    Type: String
    Default: dc1.large
    AllowedValues:
      - dc1.large
      - ds2.xlarge
  MasterUsername:
    Description: The user name that is associated with the master user account for
      the cluster that is being created
    Type: String
    Default: defaultuser
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
  MasterUserPassword:
    Description: The password that is associated with the master user account for
      the cluster that is being created.
    Type: String
    NoEcho: 'true'
  InboundTraffic:
    Description: Allow inbound traffic to the cluster from this CIDR range.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
Conditions:
  IsMultiNodeCluster:
    Fn::Equals:
      - !Ref ClusterType
      - multi-node
Resources:
  RedashInstance:
    DependsOn:
      - RedshiftSecurityGroup
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-a60c23b0
      KeyName: !Ref KeyName
      InstanceType: t2.small
      Tags:
        - {Key: Name, Value: Redash}
        - {Key: auto_off, Value: true}
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          #
          # This script setups Redash along with supervisor, nginx, PostgreSQL and Redis. It was written to be used on
          # Ubuntu 16.04.
          #
          # This script is not idempotent and if it stops in the middle, you can't just run it again. You should either
          # understand what parts of it to exclude or just start over on a new VM (assuming you're using a VM).

          set -eu

          REDASH_BASE_PATH=/opt/redash
          REDASH_BRANCH="${!REDASH_BRANCH:-master}" # Default branch/version to master if not specified in REDASH_BRANCH env var
          REDASH_VERSION=${!REDASH_VERSION-1.0.1.b2833} # Install latest version if not specified in REDASH_VERSION env var
          LATEST_URL="https://s3.amazonaws.com/redash-releases/redash.${!REDASH_VERSION}.tar.gz"
          VERSION_DIR="/opt/redash/redash.${!REDASH_VERSION}"
          REDASH_TARBALL=/tmp/redash.tar.gz
          FILES_BASE_URL=https://raw.githubusercontent.com/getredash/redash/${!REDASH_BRANCH}/setup/ubuntu/files

          cd /tmp/

          verify_root() {
              # Verify running as root:
              if [ "$(id -u)" != "0" ]; then
                  if [ $# -ne 0 ]; then
                      echo "Failed running with sudo. Exiting." 1>&2
                      exit 1
                  fi
                  echo "This script must be run as root. Trying to run with sudo."
                  sudo bash "$0" --with-sudo
                  exit 0
              fi
          }

          create_redash_user() {
              adduser --system --no-create-home --disabled-login --gecos "" redash
          }

          install_system_packages() {
              apt-get -y update
              # Base packages
              apt install -y python-pip python-dev nginx curl build-essential pwgen
              # Data sources dependencies:
              apt install -y libffi-dev libssl-dev libmysqlclient-dev libpq-dev freetds-dev libsasl2-dev
              # SAML dependency
              apt install -y xmlsec1
              # Storage servers
              apt install -y postgresql redis-server
              apt install -y supervisor
          }

          create_directories() {
              mkdir /opt/redash
              chown redash /opt/redash

              # Default config file
              if [ ! -f "/opt/redash/.env" ]; then
                  sudo -u redash wget "$FILES_BASE_URL/env" -O /opt/redash/.env
              fi

              COOKIE_SECRET=$(pwgen -1s 32)
              echo "export REDASH_COOKIE_SECRET=$COOKIE_SECRET" >> /opt/redash/.env
          }

          extract_redash_sources() {
              sudo -u redash wget "$LATEST_URL" -O "$REDASH_TARBALL"
              sudo -u redash mkdir "$VERSION_DIR"
              sudo -u redash tar -C "$VERSION_DIR" -xvf "$REDASH_TARBALL"
              ln -nfs "$VERSION_DIR" /opt/redash/current
              ln -nfs /opt/redash/.env /opt/redash/current/.env
          }

          install_python_packages() {
              pip install --upgrade pip
              pip install setproctitle # setproctitle is used by Celery for "pretty" process titles
              pip install -r /opt/redash/current/requirements.txt
              pip install -r /opt/redash/current/requirements_all_ds.txt
          }

          create_database() {
              # Create user and database
              sudo -u postgres createuser redash --no-superuser --no-createdb --no-createrole
              sudo -u postgres createdb redash --owner=redash

              cd /opt/redash/current
              sudo -u redash bin/run ./manage.py database create_tables
          }

          setup_supervisor() {
              wget -O /etc/supervisor/conf.d/redash.conf "$FILES_BASE_URL/supervisord.conf"
              service supervisor restart
          }

          setup_nginx() {
              rm /etc/nginx/sites-enabled/default
              wget -O /etc/nginx/sites-available/redash "$FILES_BASE_URL/nginx_redash_site"
              ln -nfs /etc/nginx/sites-available/redash /etc/nginx/sites-enabled/redash
              service nginx restart
          }

          verify_root
          install_system_packages
          create_redash_user
          create_directories
          extract_redash_sources
          install_python_packages
          create_database
          setup_supervisor
          setup_nginx

      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet: [!Ref RedshiftSecurityGroup]
          SubnetId: !Ref SubnetID

  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      ClusterType: !Ref ClusterType
      NumberOfNodes:
        Fn::If:
          - IsMultiNodeCluster
          - !Ref NumberOfNodes
          - !Ref AWS::NoValue
      NodeType: !Ref NodeType
      DBName: !Ref DatabaseName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      ClusterParameterGroupName: !Ref RedshiftClusterParameterGroup
      VpcSecurityGroupIds: [!Ref RedshiftSecurityGroup]
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      PubliclyAccessible: 'true'
      Port: '5439'
  RedshiftClusterParameterGroup:
    Type: AWS::Redshift::ClusterParameterGroup
    Properties:
      Description: Cluster parameter group
      ParameterGroupFamily: redshift-1.0
      Parameters:
        - ParameterName: enable_user_activity_logging
          ParameterValue: 'true'
  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group
      SubnetIds: [!Ref SubnetID]
  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group
      SecurityGroupIngress:
        - {CidrIp: !Ref InboundTraffic, FromPort: '22', IpProtocol: tcp, ToPort: '22'}
        - {CidrIp: !Ref InboundTraffic, FromPort: '80', IpProtocol: tcp, ToPort: '80'}
        - {CidrIp: !Ref InboundTraffic, FromPort: '443', IpProtocol: tcp, ToPort: '443'}
        - {CidrIp: !Ref InboundTraffic, FromPort: '5439', IpProtocol: tcp, ToPort: '5439'}
      VpcId: !Ref VPCId
  SeeItselfSecurityGroupIngress:
    # Allows redash and redshift to communicate
      DependsOn: RedshiftSecurityGroup
      Properties:
        FromPort: 5439
        ToPort: 5439
        IpProtocol: tcp
        GroupId: !Ref RedshiftSecurityGroup
        SourceSecurityGroupId: !Ref RedshiftSecurityGroup
      Type: AWS::EC2::SecurityGroupIngress
Outputs:
  ClusterEndpoint:
    Description: Cluster endpoint
    Value: !Sub "${RedshiftCluster.Endpoint.Address}:${RedshiftCluster.Endpoint.Port}"
  ClusterName:
    Description: Name of cluster
    Value: !Ref RedshiftCluster
  ParameterGroupName:
    Description: Name of parameter group
    Value: !Ref RedshiftClusterParameterGroup
  RedshiftClusterSubnetGroupName:
    Description: Name of cluster subnet group
    Value: !Ref RedshiftClusterSubnetGroup
  RedshiftClusterSecurityGroupName:
    Description: Name of cluster security group
    Value: !Ref RedshiftSecurityGroup
  RedashInstanceEndpoint:
    Description: Redash Instance Endpoint
    Value: !Ref RedashInstance
